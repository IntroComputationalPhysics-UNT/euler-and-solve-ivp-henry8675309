{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IntroComputationalPhysics-UNT/euler-and-solve-ivp-henry8675309/blob/main/rigid_pendulum%20Homework%20save%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Plotting solutions to the rigid pendulum problem\n",
        "\n",
        "In this assignment, we explore the solution to the undriven rigid pendulum using: the Euler code we wrote in class, and the `scipy.integrate` package.\n",
        "\n",
        "In this assignemnt, please use $\\omega_0 = 1$ and $I=1$, and $0\\le t \\le 100$.\n",
        "\n",
        "----\n",
        "\n",
        "**Additional information:**\n",
        "\n",
        "We will use two different initial conditions:\n",
        "* $\\theta = \\pi$ and $\\frac{d\\theta}{dt} = 0$, and\n",
        "* $\\theta = 0$ and $\\frac{d\\theta}{dt} = 2$.\n",
        "\n",
        "**Temporal evolution of $\\theta$:** for plots of $\\theta$ versus $t$, include the following plotting options:\n",
        "* `plt.figure(figsize=(10,2))`\n",
        "* `plt.xlim([0, 100]) # time`\n",
        "* `plt.ylim([- 5 * np.pi - 0.5, 5 * np.pi + 0.5]) # theta`\n",
        "* Add axes labels and a legend\n",
        "\n",
        "**Phase portraits:** for plots of $d\\theta/dt$ versus $\\theta$, include the following plotting options:\n",
        "* `plt.figure(figsize=(12,3))`\n",
        "* `plt.xlim([- 5 * np.pi - 0.5, 5 * np.pi + 0.5]) # theta`\n",
        "* `plt.ylim([-  np.pi - 0.5,  np.pi + 0.5]) # angular velocity`\n",
        "* Add axes labels and a legend\n",
        "\n",
        "**Constant energy curves:** for contour plots of the energy, include the following plotting options:\n",
        "* `plt.figure(figsize=(11,3))`\n",
        "* `plt.xlim([- 5 * np.pi - 0.5, 5 * np.pi + 0.5]) # theta`\n",
        "* `plt.ylim([-  np.pi - 0.5,  np.pi + 0.5]) # angular velocity`\n",
        "* Add axes labels and a legend\n"
      ],
      "metadata": {
        "id": "BjsgxRzQ8TsB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Problem 1:**\n",
        "\n",
        "Apply the Euler code we wrote in class to the rigid pendulum defined by $\\ddot{\\theta} + \\omega_0^2 sin(\\theta)=0$.\n",
        "\n",
        "1. **[Text cell]:** Create a text cell with organized pseudocode.\n",
        "2. **[Code cell(s)]:** For `theta_0 = math.pi`, and `ang_vel_0 = 0`, plot the temporal evolution of $\\theta$.\n",
        "3. **[Code cell(s)]:** For `theta_0 = 0`, and `ang_vel_0 = 2`, plot the temporal evolution of $\\theta$ **_and_** the phase portrait.\n",
        "4. **[Text cell]:** You will need to compare the simple Euler and symplectic/semi-implicit Euler methods and adjust mesh density to find sensible results. Explain your choice."
      ],
      "metadata": {
        "id": "M9V7_M7h36An"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problem 1 — Pseudocode (Rigid Pendulum)\n",
        "\n",
        "**Equation**\n",
        "$$\n",
        "\\ddot{\\theta} + \\omega_0^2 \\sin(\\theta) = 0, \\qquad \\omega_0 = 1\n",
        "$$\n",
        "\n",
        "**First-order form let $( v =  θ)$**\n",
        "$$\n",
        "\\dot{\\theta} = v, \\qquad \\dot{v} = -\\,\\omega_0^2 \\sin(\\theta)\n",
        "$$\n",
        "\n",
        "**Time-steppers (step $(\\Delta t$))**\n",
        "\n",
        "**Explicit Euler**\n",
        "$$\n",
        "\\theta_{n+1} = \\theta_n + \\Delta t \\, v_n, \\qquad\n",
        "v_{n+1} = v_n - \\Delta t \\, \\omega_0^2 \\sin(\\theta_n)\n",
        "$$\n",
        "\n",
        "**Symplectic (semi-implicit) Euler**\n",
        "$$\n",
        "v_{n+1} = v_n - \\Delta t \\, \\omega_0^2 \\sin(\\theta_n), \\qquad\n",
        "\\theta_{n+1} = \\theta_n + \\Delta t \\, v_{n+1}\n",
        "$$\n",
        "\n",
        "**Tasks**\n",
        "1. IC A: $\\theta_0 = \\pi,\\; \\dot{\\theta}_0 = 0$ → plot $\\theta(t)$.\n",
        "2. IC B: $\\theta_0 = 0,\\; \\dot{\\theta}_0 = 2$ → plot $\\theta(t)$ **and** phase portrait ($v$ vs. $\\theta$).\n",
        "3. Use assignment axis limits.\n",
        "4. Compare explicit vs. symplectic Euler; justify choice of $\\Delta t$.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "X3WsKrLnObkL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Simple (explicit) Euler\n",
        "def euler_simple(omega_0, theta_0, ang_vel_0, t_0, t_f, n_steps):\n",
        "    dt = (t_f - t_0) / n_steps\n",
        "    t   = [t_0]\n",
        "    th  = [theta_0]\n",
        "    w   = [ang_vel_0]   # w = dtheta/dt\n",
        "    for _ in range(n_steps):\n",
        "        th_new = th[-1] + dt * w[-1]\n",
        "        w_new  = w[-1]  - dt * (omega_0**2) * math.sin(th[-1])\n",
        "        t.append(t[-1] + dt)\n",
        "        th.append(th_new)\n",
        "        w.append(w_new)\n",
        "    return np.array(t), np.array(th), np.array(w)\n",
        "\n",
        "# Semi-implicit (symplectic) Euler\n",
        "def euler_symplectic(omega_0, theta_0, ang_vel_0, t_0, t_f, n_steps):\n",
        "    dt = (t_f - t_0) / n_steps\n",
        "    t   = [t_0]\n",
        "    th  = [theta_0]\n",
        "    w   = [ang_vel_0]\n",
        "    for _ in range(n_steps):\n",
        "        w_new  = w[-1]  - dt * (omega_0**2) * math.sin(th[-1])  # update v first\n",
        "        th_new = th[-1] + dt * w_new                             # then theta\n",
        "        t.append(t[-1] + dt)\n",
        "        th.append(th_new)\n",
        "        w.append(w_new)\n",
        "    return np.array(t), np.array(th), np.array(w)\n"
      ],
      "metadata": {
        "id": "jUVJdN6_4mxW"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "omega_0 = 1.0\n",
        "t_0, t_f = 0.0, 100.0\n",
        "dt = 0.01\n",
        "n_steps = int((t_f - t_0)/dt)\n",
        "\n",
        "# run both methods\n",
        "tE, thE, wE = euler_simple(omega_0, math.pi, 0.0, t_0, t_f, n_steps)\n",
        "tS, thS, wS = euler_symplectic(omega_0, math.pi, 0.0, t_0, t_f, n_steps)\n",
        "\n",
        "# θ(t)\n",
        "plt.figure(figsize=(10,2.6))\n",
        "plt.plot(tE, thE, label='explicit euler')\n",
        "plt.plot(tS, thS, label='symplectic euler')\n",
        "plt.xlim([0, 100])\n",
        "plt.ylim([-5*math.pi - 0.5, 5*math.pi + 0.5])\n",
        "plt.xlabel('t'); plt.ylabel(r'$\\theta$'); plt.legend()\n",
        "plt.tight_layout(); plt.show()\n",
        "\n",
        "# zoomed version (to actually see oscillations)\n",
        "plt.figure(figsize=(10,2.6))\n",
        "plt.plot(tE, thE, label='explicit euler')\n",
        "plt.plot(tS, thS, label='symplectic euler')\n",
        "plt.xlim([0, 10])                               # zoom in on first 10s\n",
        "plt.ylim([min(min(thE), min(thS))-0.2, max(max(thE), max(thS))+0.2])  # auto y-bounds\n",
        "plt.xlabel('t'); plt.ylabel(r'$\\theta$'); plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "phKtyI1s-Pr0",
        "outputId": "a0164acd-a67f-4354-e5b1-4e7221f3d236"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x260 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x260 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# run both methods\n",
        "tE, thE, wE = euler_simple(omega_0, 0.0, 2.0, t_0, t_f, n_steps)\n",
        "tS, thS, wS = euler_symplectic(omega_0, 0.0, 2.0, t_0, t_f, n_steps)\n",
        "\n",
        "# θ(t)\n",
        "plt.figure(figsize=(10,2.6))\n",
        "plt.plot(tE, thE, label='explicit euler')\n",
        "plt.plot(tS, thS, label='symplectic euler')\n",
        "plt.xlim([0, 100])\n",
        "plt.ylim([-5*math.pi - 0.5, 5*math.pi + 0.5])\n",
        "plt.xlabel('t'); plt.ylabel(r'$\\theta$'); plt.legend()\n",
        "plt.tight_layout(); plt.show()\n",
        "\n",
        "# phase portrait: w vs θ\n",
        "plt.figure(figsize=(12,3.2))\n",
        "plt.plot(thE, wE, label='explicit euler')\n",
        "plt.plot(thS, wS, label='symplectic euler')\n",
        "plt.xlim([-5*math.pi - 0.5, 5*math.pi + 0.5])\n",
        "plt.ylim([-math.pi - 0.5, math.pi + 0.5])\n",
        "plt.xlabel(r'$\\theta$'); plt.ylabel(r'$d\\theta/dt$'); plt.legend()\n",
        "plt.tight_layout(); plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "Bb9coivo-VVw",
        "outputId": "9091e04a-8562-4ef6-c3c7-e4e6233f19da"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x260 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x320 with 1 Axes>"
            ],
            "image/png": "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YcIEde3aVZIUGRmZWST17t37mq/LyujRozV8+PDM15crV06vv/66XnzxRY0cOTLzuIcfflh9+/a9qffILkZKAQAAAACAXFG7dm21bNlSNWvWVPfu3fXZZ5/pwoULmfv79OmjAwcOaP369ZIypuv16NFDvr5/F14+Pj6ZhZQkhYeHq2zZspet1RQeHq4zZ85c9t6NGze+4vmePXuumnP79u06cOCA/P39M9eBCg4OVkpKiqKjo3XmzBmdPHlSLVu2vOnvxY2eIykpSdHR0erXr19mJj8/P40dO1bR0dE3nWP79u0aM2bMZed84oknFBMTo+Tk5MzjGjRocNPvkV2MlAIAAAAAID9y98kYseSq984Gq9WqJUuWaO3atfr111/14Ycf6j//+Y82bNigyMhIhYWFqWPHjpo2bZoiIyP1888/a/ny5Ze/1b8W2DYM46rbHA7HTX85iYmJql+/vmbNmnXFvtDQUFkstz6mx9vb+4YzSdJnn32mRo0aXbbParVKUmYu8x/TKdPS0q573tGjR2eOvvonLy+vzD//sxjMLZRSAAAAAADkR4aRrSl0rmYYhpo2baqmTZtqxIgRKlOmjH788UcNHjxYkvT444/roYceUqlSpVS+fHk1bdo0R973r9FX/3xetWrVqx5br149zZ49W2FhYQoICLjqMWXLltWyZcvUvHnzq+53d3e/bLH1f/P397/uOf4pPDxcJUqU0MGDB9WzZ8+rHvPXtMGYmBgVKVJEUsZC51mpV6+e9u7dm+VaVs5CKQUAAAAAAHLFhg0btGzZMrVp00ZhYWHasGGDYmNjLyuH2rZtq4CAAI0dO1ZjxozJsfdes2aN3n77bXXu3FlLlizRd999p4ULF1712J49e+qdd95Rp06dNGbMGJUqVUpHjhzRDz/8oBdffFGlSpXSqFGj9PTTTyssLEzt27dXQkKC1qxZo2effVbS36VV06ZN5enpmVkS/dP1zvFvo0eP1nPPPafAwEC1a9dOqamp2rx5sy5cuKDBgwerQoUKioiI0KhRozRu3Djt27dPEyZMyPL7MmLECN17770qXbq0unXrJovFou3bt2vXrl0aO3bsDX6Xbw1rSgEAAAAAgFwREBCglStX6p577lGlSpX06quvasKECWrfvn3mMRaLRX369JHdblevXr1y7L2HDBmizZs3q27duho7dqwmTpyotm3bXvVYHx8frVy5UqVLl1bXrl1VtWpV9evXTykpKZkjp3r37q33339fH3/8sapXr657771X+/fvzzzHhAkTtGTJEkVERKhu3bpXfZ/rnePfHn/8cX3++eeaNm2aatasqbvvvlvTp09XZGSkpIzRWf/73/8UFRWlWrVq6a233rpusdS2bVv99NNP+vXXX3Xbbbfp9ttv13vvvZe5EL0zGaaZzfs4FiDx8fEKDAxUXFzcNYflAQAAAACQl6SkpOjQoUOKjIy8bO2fgqBfv36KjY3V/Pnzc+R8ZcuW1fPPP6/nn38+R86HK2V1PWa3d2H6HgAAAAAAcIm4uDjt3LlTX3/9dY4VUsg/KKUAAAAAAIBLdOrUSRs3btTTTz+t1q1buzoOnIxSCgAAAAAAuMTy5ctz5byHDx/OlfMiZ7HQOQAAAAAAAJyOUgoAAAAAgHykEN6vDHlQTlyHlFIAAAAAAOQDVqtVkmSz2VycBJCSk5MlSe7u7jd9jny3ptT48eP1ww8/KCoqSt7e3mrSpIneeustVa5c2dXRAAAAAADINW5ubvLx8VFsbKzc3d1lsTDOBM5nmqaSk5N15swZBQUFZZalNyPflVIrVqzQgAEDdNtttyk9PV2vvPKK2rRpo927d8vX19fV8QAAAADkA6ZpymZ36JLNrnSHKXeLRVarITeLIXerRVaL4eqIwBUMw1Dx4sV16NAhHTlyxNVxMpmmqXSHKYeZ8WeHacrhkExlTO8y//ofQzJkyGJkfC0WQ7JaDFkNQxb+zuU7QUFBKlas2C2dwzDz+WTU2NhYhYWFacWKFbrrrruuekxqaqpSU1Mzn8fHxysiIkJxcXEKCAhwVlQAAIAbdvbkER2dNVAOq4dMi7scFnfJ6iGHu68M3xC5+YfJMzBMfiElVaxsNXn7+rs6MuByaXaHjpxLVnRsog6dvqCUs0dkXjgie+I5GZfOyTvtonwdCXI30+Qmu9wMu9xkl03uumR66JI85XDzks0jSCmeoXL4hss7uIQCwsqoZGgRlS7qo3IhfvJwY5QKXMPhcDh9Cp9pmjqXZFN0bGLG363YJMXEpehCXJy8Lp1WmHFBgUpSgJLlbyTLT8lyl11WOWQ1HLLIoXTTTZfkrhR5KsX0UJx8dV4BijUDFW8JkptfUZUq6q/SRX1UtqivygT7KDLEV57uNz8SB7nD3d09yxFS8fHxCgwMvG7vku9GSv1bXFycJCk4OPiax4wfP16jR492ViQAAIAckxR/TvWSVmb7+DMK1lmPkkr0LSOzeC0FlbtNZao1lJePXy6mBFwnze5QVEyCth85o5joHTJPbldo0l5V1DFVM86olXFWVuNf/w5vSMrO77i2/38kSDol2f80dNwMVbRZQmtUQvH+FWUvXk+hkTVUr2yoqpUIYIQVnMJiscjLyytX3yPN7tDOE3HadOi8Nh0+r6gjMQq7FK3qlsOqZhxRF8sxRRhnFGrE59h7pl5y06EzxXXALKFos6QWOyL0p1FBRYqXU70yRVS3dBHdXi5YYf65+7XDefL1SCmHw6H77rtPFy9e1OrVq695HCOlAABAfnXx7CntXTZdZrpNpj1Nstuk9FRZbAlySzkvT9t5+aZdVLAjVoFKuuo50k2LjriVUWxwA3lUaKbyt7VRYHCYk78SIGc4HKb2nIrXhr3HdGb3KgWe3qAG+lO1jEPyNNKu+po0i6eSvEvK4RMiwzdEVt+isvoWkdXDW+7uHrK4echhWOVIt8m0JSs9JUm2lEQ5EmNlJJ6WW/IZeabEysORctXzJ5je2umI1C5LZV0o1kRFqtypOyqXVNXi/jIMSirkHycuXtJvUWf0e9QZ7Y+OVk37n2poiVIjS5QqG8dk+XfB+/8cnoEyipSW4RsqeReRvIMl7yDJzVOyuGU8DKtkT5VsyZItSbIlSsnnpIQYmfExUuJpGab9quc/bQZpq6Oi/nBU0GpHTZlh1XVn5XDdVTFUt0UWkacbI6nymuyOlMrXpVT//v31888/a/Xq1SpVqlS2X5fdbw4AAEB+EnfutE4diVLCyb1Ki9kt33O7VCplr4J1+b9iO0xD0W7lFVu8mUIbdFaFWk1lsFgu8jBbukNro89q05bNsh5YrMZpm9TAslfuxuW/wKZafZUcXE3uJevIt3RtGUUrSMGRkl+4dKvlkGlKiWeks/tknt2vxBN/Ku34Dvmd3ykPx6XLDr1kemijo4q2etRXeqV7VL9OHTUpX5RfnJEnHYxN1PztJ/XrzhPyPLNdLaxb1dKyVdUsV65ZZfoXl1GsllSsphReXQouJxUpk1FE3SqHXYo7JsXuk87ulWL3yjy1Qzq164qyKtYM0BpHDa2w19ZG99vUsFp5ta9RTHdVCpUXU/3yhAJfSg0cOFDz5s3TypUrFRkZeUOvpZQCAACFhelwKPbkYR3fuUJpB1ao2IVNKuM4ftkxp1VUB0OaKahhT1Vp0JyCCnmCw2FqbfQ5rVq/VkWi56qlY70qWk5cdkyiZzE5yjSVf+W7ZZS9QyoSKTn7+rWnS2f3ynFss+KjfpfH0VXysZ297JAdjkgtt9wuW+WOuqPR7WpYNphFneFSp+JStGD7SS3YdlxeMRvVybpWba2bFPKPqXimDCm8uowyTaUyTaTSjSX/cOeHtSVLMdul45ukI2tkHlopIy05c3eaadUaRw397Gio1daGalSjkno0iFCjyGBGKrpQgS2lTNPUs88+qx9//FHLly9XxYoVb/gclFIAAKAwO3vqqA6tny+3/T+rcuIm+Rh/L3NwzCihoxEdVbpZX0WUq+rClCisjpxL0qJ125S69Ts1T1uh2paDmfvssiohvKH8at8nt8ptM0Zp5LVfOk1TOrNHafuXKnH7AgXGbpZFjszdmxyVtNSjpbzqdNP9jaupdFEfF4ZFYeJwmFq5P1ZfrT+qE3s3qZNljTpa16qkce7vYzwDZKnQSqrUTqrQSvIt6sLE15Buk45vlKJ/k7n3ZxlndmfusplWLXPU07f2ZjoSdLu6Niij++uXUvFAbxcGLpwKbCn1zDPP6Ouvv9a8efNUuXLlzO2BgYHy9s7ehUYpBQAAkCElOVH71v0k247vVe3iissKqh0edZRar5/qtHxQ7u4eLkyJgs7uMLVs9yltXD5PdU9/r7aWzXIzMoocu6xKKHW3Am57SJbKbSWvQBenvUGJsXJELVLclu8UGLMms6C6ZHroF8dt2lWyhxrf1U7NqoSzSDpyxYUkm77ZdExzNuxXzbgVesRtqRpY9mXud3j4yVKtk1Szm1T2Tsnq7sK0N+Hsfmn3PJm758o4tTNz82kzSD/Y79Q3jlaqUb2WHrujrOqVLsLoKScpsKXUtS6gadOmqU+fPtk6B6UUAADAlZITL2rPb/+T5+5vVe3S1swFbWMUooNleqhS+wEKLZb9dTyB60lISdOP6/fq/Jrp6pC66LLpeReK1JJfw0fkXut+yTfEhSlzUHyM0rZ9o9RNX8ov4e8RYNsc5TTP8z5F3PGwHri9vHw98/1N0pEHHDufrC9WH9KKTVv1gLlY3a3LVdRIkCSZFjcZldpJtXpIFdtI7gVkJNHpP6Wts2TumC0jOWMard009Kujgaamt5etREM9dmc53VOzuNytTFXPTQW2lMoJlFIAAABZO3PsgA798qEqHf9BRf5/ofQU011/hNyniHtfUkRk5eucAbi280k2ff37Frlt+kwParGCjIw7R9os3rJV7y6/pk9JxWq4OGUuMk3pxBYlrPlU3lE/ys20ScoY2fGNcY8sjZ7Qw3dWV1E/TxcHRX60JyZek5dHa9+ujXrCskD3WdZm3hTA4V9ClgZ9pXq9JP9iLk6ai9Jt0v5fpM1TpejfMjfvdJTVZ+n3antgM/VvXlld65WShxvlVG6glMoCpRQAAED22FKStfPXGQrc8YUqpO+XlLGo7JbA1gpp95IqVKvn4oTIT84mpmr20rUK3PqJ7tdv8jYyyph4nzLyuqO/POr1lLwK2c/nibFK2zRVaes/k09qrCTpoumrL817dKluPz3Wqp5C/SmncH0HziTovSX7dWLXKg1wm6vW1j8y95ll75Bx+zNSxbaStZCNxDsTJW34ROb2b2SkZ9wpM9pRXB+md9Ef/i30ZPNK6t6gFHfHzGGUUlmglAIAALhBpqm96xfKvuJdVUvZKklymIY2BrRWsU5jVLYCi6Lj2i4m2zT9140q+seH6mEslaeRLkmKK1JD/q2GyVK1o2Qp5L8Qptvk2DlHycvell/iIUlSvOmtr8x7ZGv4jPq2qK1An3y21g+c4si5JP136X5FbV+rF6zfZZZRpgwZVTtKTZ+XStV3bci8IPm8tOkLmesnybh0QZJ00FFMk9I7a4NfSz3buoq61Y9gbbccQimVBUopAACAm3dw2wolLn1LtRLXSMq429HGop1V/v5RKl6ytIvTIS9JSbPrfyt2KH31f9XTXJS5kP6FsEYKavuKjHJ3572757mawy7zz7lKXvqmfOMyFqM+Z/rrM+N++Td9Un3vriwfj0I20gVXdT7JpveX7tPaDes1yPqdOlrXS5JMwyKj9sPSHS9IIRVcnDIPSk2QNn4qc+1HMi6dlyTtd5TUm+kP6ljIXRp+T1U1rxzGgui3iFIqC5RSAAAAt+7IjlVK+nmEql3K+Ff5JNNTW0o8otoPjVRgQD67QxpylMNhau6WQzq++L/qnf6tAo1kSVJ8cC35d3hdRvlmrg2YHzgcMvfMV/LiUfJNyBg5ddQRqs/ce6peh37qVCdCFkZ0FEq2dIdmrj+iGUs36/H02XrYuizzbpWqcb/U7BXKqOxITZQ2fS5zzfuZI6fWO6pqXFpP+UY20Cv3VFWtUkGuzZiPUUplgVIKAAAg5+xf/5OMZaNVIS1jVEeMQhRd92U1vvcxWbm7UaGz/dhFzf1uuh65+InKW2IkSXH+FeV3zyhZq3RgZNSNsqfL8cdM2ZaNk1dKxppTWx0V9FXws3qkayfVLV3ExQHhLKZp6ve9ZzR+wU7dcXGunnf7PrPwVaX2Uov/SMVqujZkfnTporR6osz1n8iwZ4zmnGtvovHpPdXitloa1raKgn09XJsxH6KUygKlFAAAQM4yHQ7tXjZTIWtfV7iZ8YvzdrdacuvwlqrXbeLidHCGC0k2TZ2/RHV3v60W1m2SpGT3YLm3GSX3+o+wZtStsiUpbc0kmavfk4c9WQ7T0P/sLbS76iA917GRwgO8XJ0QuejY+WSNmLdLjv1L9ZrbTFWwnJQkmeE1ZLR7U4q808UJC4CLx6TfxsrcMVuGTCWaXnov/X7N87hXz7etrocalma9qRtAKZUFSikAAIDckZaSqJ2zx6jawanyMtKUblq0Jrirajz6tooGF3V1POQCh8PUd+v3K+HXN9TbnC93w650uSm1wZPybfVy4bubXm6Lj1HKolfkFfWDJOmC6acP9LDKtXtGPRuVZUpfAZNmd+iL1Yf09dL1ekXT1M66SZLk8AmRpcWrUr1eFL457eQ2aeEQ6cRmSdIeR4RGpPVVSolGGtOpOqMTs4lSKguUUgAAALnr/In9OjF7iGrGr5AknVSIDjYcq6btH2Tx2AIkOjZRX82aoV7n/6tIy2lJ0oWSzVWky7usaZPbDq/RpXmD5X0hSpK0yVFJM0KG6tke96hyMX8Xh0NO2HLkgl77YZvqn52rF91my9+4JNPiJqPR09LdL0perN2XaxwOaetMmUtHZS6G/l36XRprf0T3N6mpoW0rccOB66CUygKlFAAAgHNEr5sv3yVDVMxxRpK0xru5Sj/8X0VElHFxMtyKdLtDX/62VUGrRqmrZaUkKckzTF73TZS1ekcXpytE7OlybPxM9qVj5G5PVqrprg/tXWU2eU7Ptq4qL3dG0ORHl2x2vbU4ShvWr9Qbbp+rruWAJMksdZuMjv+Vwqu7OGEhknxeWjpK+mOGJOmMGaT/pD2mqKA79WbXWmpaIcS1+fIwSqksUEoBAAA4T9qlBP05a7hqHpslq2HqoumnP2q8omb3P8NUo3wo6lS8fvhqsp5M+EghRrwcMpRcu6/82o9mqp6rXDymlLnPyuvw75KkXY6y+sh/kPo/2FW1I4Jcmw03ZMuR83px9hZ1iPtGz7r9KHfDLoeHvyytRkoNHmOqnqsc3SDNHyidzbihx3x7Y41M6602DarrlQ5VFejt7uKAeQ+lVBYopQAAAJzv5J9rZZs7QGXTDkqS1njdrbK9JqtkiZIuTobsSLc79MXSbQpf85o6W1ZLyrirXkCPj2VENHRxOsg0pe3fKG3hS3JPi1O6adEkRxfZ7xiigS2rysONO2HmZSlpdk1csk+/rV6lCW6TVduS8TmpKvdK97wrBRR3bUBIaSnS8vEy134gw3TorBmg19L66g+/u/R2t9q6u1KoqxPmKZRSWaCUAgAAcA0z3aad34xUtf2fyM1w6LRZRFGN3tRd7R9grak87Nj5ZE37cqqeuDBBxY3zcsiiSw2flW+bVyU3bpWepySekW3+YHnsWyBJ2uqooA+DXtSwh9qranF+98mLth+7qCGz/9DdF+boRbdv5WmkyeEVJEuHCVKN+yU+G/OWE1ukuQOk2D2SpO/td2pEWh91b1JVw9tXYdrs/6OUygKlFAAAgGud+nONHD88oRL2E5KkZQGdVavP+woN5q5GeYlpmpq7cb9SFv1HDxm/SpISfMvI74HPZJRu5OJ0yNKO75S24AW5pyUoyfTUWHtvRbR8Uk/fXYFps3mEw2Hqk5XRmv3rGr3t9rEaWTIWrVeFVtJ9HzE6Ki9LT5VWvC1z9UQZpkNHHGF6Pm2A4kPq6L8P1lWNkixCTymVBUopAAAA17OnJmnPly+oxonZkqRDKqmz7afotkZ3ujgZJOlisk2TvpmnBw6PUAXLSUlSQq3H5H/vWMnD18XpkC0Xj8o250l5HF8nSfrZfpvmlhqmMQ/drfAALxeHK9xOx6do8LfbFHhwod50/1wBRrJMdx8Zbd+Q6vdhdFR+cWSt9MOTUtwxpcui/6Z11admZz3Xuqqevru8rIW4AKaUygKlFAAAQN5xdNMC+S56TkXN80ox3fVb5FC1fmSY3N2YAuEqWw6f17Kv3tSgtKnyNNKU6BEq7+6fylqxhauj4UY57DLXfCDHb2NlNdMVYwbrFetg9erxgJpXCXN1ukJp2Z7TevW7TRpom6qebsskSWaphjK6fioFR7o4HW7YpYvSwiHSrjmSpE2OSnrO9qxKla2g/z5YVyWCvF2bz0UopbJAKQUAAJC3pFw8rWNf9FLFhPWSpJWed6tc389Vqhi/NDuTaZr68rcdCl8xVO0sGyVJ8RHNFfDg55Ivtz7P105uk+3bx+RxMVrppkVvpT8oe6OBeumeKvKkAHaK1HS7xi+K0pp1q/Wh+4eqYjkmU4aMO16Qmr8iWbmDW762fbbMhUNk2BJ0wfTXoLRntMOrgSb2qK0WVcJdnc7pKKWyQCkFAACQBzkc2vvjOJXfOVFucuiIiul4y4/V9M6Wrk5WKMQlp+mjmd+o14nRirDEKl1usrccKc+mAyULd24rEFITZJ8/SNY/v5ckLbHX0+dFh+mtR+5W2RCmZOamo+eS1f+rzapxZr5Guc2Qt2GT6Rsmo+sUqTwjEAuM84ek73pLMdvlkKEP0zvrv+n36/G7KmhY28pytxaez1JKqSxQSgEAAORdp/9cIcv3/RTqiFWq6a7FZYbqnt4vFqof5p1t+9ELWjZznJ61TZW7YVeCdyn59fxSRqn6ro6GnGaa0pZpsi96SVaHTcfNEA0zBqtv9/vVpnoxV6crkJbtOa3hszfqxfRP1d1tZcbG8i2kLlMkP0aDFjhpKdLi4dKWaZKk1fbqGpQ2UBERZfTRw3VVqoiPiwM6B6VUFiilAAAA8ra0hLM68kVvVbi4WpL0q3cH1XnqE4UF8bNbTjJNU/9bu1fevwxVF8sqSVJcZAcFPjBZ8uLuUQVazHalf9NLbnGHZTOtGp3eWwF3PqUhrSvJjQI4R9gdpt5bsk9zl6/TZPf3VNNyWKZhkdHiVanpC4xALOh2fCstGCSlJeu0imhA6rPa51lD73avXSgKYEqpLFBKAQAA5AMOhw58P1Lldn0oi2Fqu1FZRo8ZqlW1qquTFQip6Xa9/+0SdYx6UdUsR2SXRWktRsnrzue481dhkRInx9yBskTNlyR9nd5CiyIG672HGyrU39PF4fK3c4mpeu6brbIe/E3/dZ+kIkaiTJ+iMrpNlco1c3U8OMuZKOnbXtLZvUqXVSPTemuWvZX6NyuvoW0qF+i781FKZYFSCgAAIP+I2TRP/gv7y09JOmMG6Y9G76tt+84yKE5u2qm4FE2ZOkWDLr6lICNJl9yLyOvhL2VE3uXqaHA205TWvC9z6WgZMrXZUUmveb6o13u2VIOywa5Oly/9cfSCBn61WV2TZmuw2xxZDFMqUU/q8aUUFOHqeHC21ERp/rPSnz9Ikmalt9So9N5qVKGYPnioroJ9PVwcMHdQSmWBUgoAACB/SY7ZpwvTeqik7ZDSTKvmFh+kjv1elZc7dw27UZsPndWmma/qKfs3shim4ovWVkCv/0mBJV0dDa60f6ns3/WV1RavGDNYz6QPVucOHdWrcRkK4Bvw3eZjGvfjRr1tmaQ21i0ZG+v3kdq9Jbl7uTQbXMg0pdXvScvGSDK12ayip1IHySuomCY/Uk+1SgW5OmGOo5TKAqUUAABA/mOmJujQF31V7swSSdJPXvfqtqenKDzIz8XJ8o9v1kbJf/EgdbCslyQl1HhU/p0nSG5M1YKkc9FyfP2gLOf2KdV01ytp/eRev6fGdKohDzfWP8qK3WHq7cVR+mnlBn3u8a6qWo7JtHrK6DBBqveoq+Mhr9j3i/T941JqvE4bIXos5QXtt5bX2E411OO2gjWKLru9S778ZFm5cqU6duyoEiVKyDAMzZ0719WRAAAAkMsMT3+V6/+djtQZKkm6N+UnHfxvB+06eNTFyfK+NLtDb377m6oufkgdLOuVLjel3vO+/Lt9RCGFvxUtL8sTy2RWvkeeRpomeHyislvfUs9P1yo2IdXV6fKsxNR0PTVzizav+lnzPF/LKKT8wmX0XUQhhctVais9vkwqWkHh5ln96DVabRxr9OL3O/TyDzuVmm53dUKny5elVFJSkmrXrq1Jkya5OgoAAACcyTBUpvNrim3/uS7JU43NbfKa0U6/rdvg6mR5VlxymkZNmaU+fz6m2paDuuQWJGufefJs2NfV0ZAXeQXIeGCWdPdLkqSn3X5Sv5hR6v7hMu08HuficHnP8QvJ6jZ5rYL2fav/eYxViBEvFasl44nfpFINXB0PeVFopYxiqkJreZg2feTxoQa6zdX/Nh5RjynrFRN3ydUJnSrfT98zDEM//vijOnfufM1jUlNTlZr6d7MfHx+viIgIpu8BAADkY0mHNyt15gMKtp/VedNPS2tNVPeuPVj/5h+OnEvS9M/e14uX3pe3YVNiQAX59ZkjBUe6Ohrygx3fyZz7jAyHTdsd5TTAMUzDut2tTnVYf0ySthy5oP5fbtBjqTP1tNtPGRur3id1+UTy8HVtOOR9Drv062vS+ozBNvPUTENTHlOgn48mPVxPjcoVdXHAW1Ogp+/dqPHjxyswMDDzERFRsOZqAgAAFEa+ZRso8LlVOulTRcFGojrv6K+Zn4zXJVvhm/5wNZsOndPCj17QyJS35W3YlBDRXH7P/EYhheyr1V1GnwVyeBdVbctBzba+qsmz5+vNn6Nkd+TrsQ237Ic/juvxT3/XG7Y3/y6k7npR6j6DQgrZY7FK7d6Q7nlXMizqpOX6zu9d2RLPq+fnGzRj7WHl8zFE2cJIKUZKAQAA5G+2ZB2b2ksRpzIWQJ/l01Otn5qgsEBvFwdznblbDsqY96w6WVZLkpLrPSWfe8dn/BIE3KjzB2XO6iHj3H4lml4amPasrJXa6r8P1ZWfp5ur0zmVw2Hq3V/3as7yzZrm8baqW47IdPOS0fljqcb9ro6H/Grfr9KcvpItUac8Sqt7wgs6Zobr/nqlNK5LjXx5p1lGSv2Dp6enAgICLnsAAACggPDwUcST3+pEjf6SpJ7Js7T+g0e0L+aCi4M5n8Nh6sNFWxQ69xF1sqyWXVbZ2r8nn/veppDCzQsuJ+PxJVLZO+VnpOgL93dVfP8sdZu8VicvFp71b5JS09V/1hYtWbFCP3iOzCikfENl9FlEIYVbU6mN9NhiKaCkitmO6le/Mapv2afv/ziu7p+s04kC/PesUJRSAAAAKOAsFpXs9qbONRsvuyy6z75Up6Z00fqoI65O5jQpaXaNmPmLWq/vrabWP5Vq8ZHx8LfyaPSYq6OhIPAuIj3yg1TnEVkNU2Pdp+nes5+r00erte3YRVeny3UnL15S90/WKX7Pb/reY5RKGWelohVk9Fsilarv6ngoCIrVzFgAvVgteadd0Lfe49XFe5t2nohTxw9Xa130OVcnzBWUUgAAACgwijZ7Rpe6zFCqPHWXtsr3605atG6bq2PlurjkNL065RsNONhfVSzHdMkzVJ5PLJalUitXR0NB4uYhdfpIav4fSdJAt3kalvKhek5ZpYU7YlwcLvdsPXpB9320RhVO/6wvPd5SgJEsRdwu9VvCGm3IWQHFpb4/S5XayWpP1US9qyHBa3U+yaZHvtigqasPFbh1pvJlKZWYmKht27Zp27ZtkqRDhw5p27ZtOnr0qGuDAQAAwOX8at8n9ZmvBGugaloOqcbP3fTVT0sL3A/yfzl58ZLGTZqsEbFDVNw4r+TACvLu/5tUvLaro6EgMgzp7heljh/INCzq4bZCHxnvaOjXa/XRb/sL3N+zedtO6IFP16nHpW/1gcckuStdqtZZ6jVP8gl2dTwURJ5+0gOzpLqPyDAdejb5I31SaonsDofG/LRbg7/dXqBu6JEvFzpfvny5mjdvfsX23r17a/r06dd9fXYX3AIAAED+5Yg9oIufd1Jw6nGdN/30Tfl39ETPB+VuzZf/LntVUafi9c1n7+g/6ZPkbtiVVLyRfHvNzphqBeS2vT/L/K6vjPRL2uYor8dsw9SsblWNv7+mPN3y9xpmDoep95fu06Tf9mqM23T1dFuWsaPxQKn165Kl4HyOII8yTen3cdLKdyRJUSW7qeOhLkpzGKpeIkCfPFJfEcE+Lg55bdntXfJlKXWrKKUAAAAKicRYnf20k0Li/9Ql00OTwkbq6cefLhB3DFt34Kw2fvUfDdI3kqTkSp3k0+Mzyc3TxclQqBzbJH3dXbp0QYfMYnrUNlzFy1TWlEcbKNjXw9Xpbsolm11DvtumZTuP6iP3D9XaukWmDBnt35IaPeXqeChsNn4mLRomydT5iDa690RvnUw2VMTHXR89XE9NK4S4OuFVUUplgVIKAACgELEl6ezUBxVyaqXSTKsm+g1Wn6eGKjzAy9XJbtpP24/r7Jyh6mP9WZKU0nCgvNoxegMuErtP+up+Ke6oYhWkPqkvKqFINU3t00AVwvxdne6GnIpL0RNfbtbhEzH6wuNdNbRESVZPqdsXUtWOro6Hwmr3POn7JyR7qlJLNFLvSy9ofYxDFkN6uX1VPX5npAzDcHXKy2S3d+G/WgAAACjYPHwV8sQPulC+k9wNu4YlvquZH7ym/acTXJ3spkxduU+2OU9lFlJprd+Q1z3jKKTgOqGVpH6/SuE1FKqLmu05VuEX/lCXj9dq1f5YV6fLth3HL+q+j1br1IkjmuM1NqOQ8gyQHv2BQgquVa1TxnXoGSjPkxv0tdso9a3pJYcpjVu0R899s03JtnRXp7wp/JcLAAAABZ/VXUV6TldCzb6yGKaGpn+qXycP1obos65Olm0Oh6m35v+hMkueVFfratlllaPzFLk3HeDqaMD/3zVskVSmqfyUrK8831J922b1mbZJX60/4up01/XTjpPq/sk6eSYe1VyfMaqsw5JvqNTnJ6nsHa6OB2Rch4/9LPkXlyU2SiNiX9DE1oFysxhasP2kun68VkfPJbs65Q2jlAIAAEDhYLHIv+t7utRkmCRpgL5V1PQB+mn7cRcHu77UdLuGf71KzTc/rZbWrUq3eMry0CxZ6jzo6mjA37wCpUe+lyq2ladS9YXHBLXTOr06d5dGztuldLvD1QmvYJqm/rt0vwZ+vVWR9sNa4PO6SjpOSUFlpMd+4S6WyFvCq0uPLZaKRMq4eERdt/bTj92CFeLnoahTCer40Wqt3Jd/RidKlFIAAAAoTAxD3m1eVVqb8ZKk3tbFss15Sp8v35tnb2Ufn5KmQZ/9or77BqihZa9sbv5y6z1XRuX2ro4GXMndW3pwllSjm6yy6yOPD/Wg9TfNWHdEvadt1MVkm6sTZrpks2vg11v13tJ9amBEaa7PWAXZz0th1TOmIxYt7+qIwJWKlM0opsKqSYmnVHPJg1rc3Ve1I4IUdylNfaZt1OTl0S79b1pKml0j5+3K1rGUUgAAACh03Js8I0eXT+WQVV2tq1Vm2dMaN2+r7I68VUydikvRc5N+1PCY51XVclQ2rxB5PP6zVKaJq6MB12Z1l7p+KjV4TIZMven+uQZ6LNSaA+fUedIaHTjj+vXcTl68pG6frNXCnTFq7bZV33i/JS97ohRxu9R3oeRfzNURgWvzLyb1WSiVrC9duqCQ77vru7bpeqBBhBym9NbiKA38equSUp2/ztTB2ER1nrRG3/9xIlvHU0oBAACgULLUfkDGQ18r3eKp1tY/1HLLAA2euVopaXZXR5Mk7T+doGEfzdLb8cNU1nJaNv8IeTy5RCpW09XRgOuzWKUOE6U7XpAkDbXM0hjf73X4XJK6TFqr36POuCzaliMXdN9Ha/TnyXg94r1en7pPlJsjVarYVnr0R8m7iMuyAdnmEyz1midF3iXZEuXxv+56s+YJjetSQ+5WQwt3xqjrx2t1+GySU+KYpqlvNh5Vhw9WK+pUgoJ93LP1OsPMq+OUc1F2b00IAACAQuDIWqXN7Cb39CT94aig98LH64M+zVTE18NlkTYdPq8Pps/SR+YbCjSSZStaVR595jJ6A/nT6vekpaMkSb9436unLzwoGRa93L6KnriznFNvZf/d5mP6z4+7ZLM7NCR4tZ5N/jhjR60HpU4fZYzyAvKTtBRpTl9p7yLJ4iZ1maItAS309Fd/KDYhVT4eVv2nQ1U93LB0rv1du5hs0/Dvd2rxn6ckSU0rFNXo1qVUsWzEdXsXSilKKQAAAJzYovQZXeRmi9MuR1m96v+6PuzXShHBPk6PsnjXKX09+ytNtrwtXyNV6SVuk9uj3zF6A/nb5qnST4Mlmdoa1EbdTj0qu6zqWrekxnapIR8Pt1x9e1u6Q28s2qPpaw9Lkt4puUrdz03O2NnwKandm5KFiUTIp+xp0txnpJ3fSjKkeyfqdKWH9ez/tmrjofOSpDsrhuit+2upRJB3jr714l2nNHL+Lp2OT5W71dDQNpX1ROMSSpzxsAKfnEspdTWUUgAAALjCqV1Kn9FJbpfOaq+jlJ5zH6l3+rZRrVJBToswc91hLV3wtaa4T5SXkSZ72btlffh/koev0zIAuWbnHOnHpyRHug6HtVK7472V4rCqYpifPu5ZTxXD/XPlbU9cvKQBs/7QtmMXJZmaVWmVmh79JGPnHS9ILUdKThytBeQKh0P6eZi06fOM523GyXH7AE1be1hvL45SarpD/p5uGtSqono1LisPt1srYWPiLmnkvD/16+7TkqRyIb7674N1VTPMTfrmYcXv+V2BbybkXinVpEkTLV68OF+WOpRSAAAAuKrYfbJP7yhr0ikddBTT43pNrz3cRs2rhOXq25qmqXd/3asDK77Rh+4fyMOwy1GxnSw9ZkjuXrn63oBTRS2Svust2W06X6ql7jv1uI4nmvJ2t2ps5xq6v36pHH273/ee0Quzt+licpoCvdw0r+pSld3zacbO5q9Kdw2lkELBYZrSsjHS6okZz1u8Jt01VNGxiRr63XZtPXpRklQu1FfD21VRq6rhslhu7PqPu5SmT1ZEa+rqQ0pNd8jNYuipu8vp2RYV5WVPkr7uIR1dp3i7twLHns69UspisejUqVMKC7v8P9Dx8fEaN26c3nrrrZs5rVNQSgEAAOCazh+SY8Z9ssQd1XEzRI+mvaqnOrfUgw1L58rbpdkdevmHnbJtna2J7pPlZjhkVu8io+tnrG+Dgmn/Uml2Tyk9RbYyzfR02mD9djBRktSlbkmN7FhNQT63tqZbsi1d4xdFaeb6I5Kk2iX99VWpufLf/kXGAW3GSU0G3tJ7AHnWirel38dl/PmuF6Xmr8hhSnO2HNfbv0TpbKJNklQp3E9P3FlO7WsWl59n1lNoj5xL0sx1RzR78zElpGTc1e+2skX0eucaqlIsQEo+L311v3TyD8kzUPGdpiuwesucL6W6deumBg0a6D//+Y+2b9+uGjVqXLY/JiZGpUqVkt2eN+5acjWUUgAAAMhS3HGZMzrJOH9Ap8wi6ml7RR1aNNMLrSrm6EKx8SlpGvj1VhWP/lbj3T6XxTCl2g9nLLhssebY+wB5zsEV0v8elNKSZZa5Q1NKvqG3fz8uhymF+HlqbOcaalfj5hb2X3/wnIZ/v0OHzyVLkvo2jtCr5hRZt32VcUCHidJt/XLqKwHyptXvS0tHZvy5yXNS6zGSYSg+JU2fLI/Wl+uOKDE1o1zydLPozoqhalC2iMqF+CrY10O2dIdiE1O1+2S8Vu0/q90x8Zmnrhjmp5faVVHLqmEZ/01MjJVmdpFO75S8g6VHf1S8X7ls9S43XEoNHjxYGzdu1Nq1a2UYhooWLaratWurdu3aqlOnjvbu3atp06bp+PHjN/5NcxJKKQAAAFxXwmmZMzvLOLNbZ80APWp7WdXrNdX4rjXlbr31BZGPnU9Wvxmb1OTsHI1y/zJjY4N+0j3vsuAyCoej66Wvukm2BCmikbbd/ZmGzDuk6NiMW9g3qxyql9pVUdXi2fud7dj5ZL25OEoLd8RIkkoEeumdrtXUdNdr0s7vJMMidfpYqvNQrn1JQJ6y/hNp8UsZf274lNT+rczpqnGX0jRrwxHN2XxcB88mXfdUFkO6o2Ko+jQpo2aVwv6e9hcfI33ZSTq7V/INk3rNk8KrZbt3uenpex4eHlqzZo1OnjyprVu3atu2bdq5c6ccDofGjRunhx9++GZO6xSUUgAAAMiW5PPSzM5SzHZdNH3V2/aSAircrsmP1L/uVIesbDlyXk9+uUU9UuboJfdvMjY2Hii1Gcv6Nihcjm+RvuoipcRJJeoq5cE5+mDtWX268qDSHaYMQ2pTLVyP3F5GjcsVldu/CmGHw9QfRy9o1oajmr/9pOwOUxZDeqhhab3UOlIBPz0lRf0kWdyk+z+Xqndx0RcKuMjmadJPL0gypfp9pA7vXfYPH6Zp6s+T8VoXfU5bj13QiYspuphsk4fVoiAfd1Uu5q86EUXUokqYgn3/Na324lFpxn3ShUNSQEmp13wppIKk7PcuN11KpaWlyc3NLUeHLzsLpRQAAACy7dJFaVZ36fhGJZre6msbpqRiDfVZ7wYqeRO31v520zG9Om+nBuhbDXL7MWPj3S9JzV6mkELhFLNd+rKzdOm8FF5T6jVXhy95651f92aOepIkfy831S1dRCWDMhb/PxWXop0n4nU2MTXzmDsrhujl9lVVLdRdmv2IdGCpZPWQenwpVW7v7K8MyBu2fS3NGyCZjpybIn4uOmOEVNwxKaiM1HuBVKRM5u5cKaUaN26sunXrqk6dOqpbt65q1qwpL6/8dzcQSikAAADckNTEjPVvDq9Sijz0uG2IdnrW09vdaqlt9eyte3PJZtdr83ZpzpZj+o/bLD3htihjR6tRGbelBwqzM3syRlwknZFCKku950v+xbTvdIJmrT+iudtOKu5S2lVf6u/pptbVw9W3SaRqlgq87O+r3Lylh76Wyrdw8hcE5DE750g/PCmZdqnG/VKXKTd/M40zURmFVOIpqWjFjL+vASUuOyRXSqmxY8dqx44d2r59u6Kjo2UYhipWrKg6depc9vj3HfnyGkopAAAA3LC0S9K3vaT9vypNbupvG6Sljvp65PbSerFdFQV4XfuH+y1HzuvFOTt0MDZBY92nqad1WcaO9m9LjZ5y0hcA5HFnD0gzOkoJJ6XgchkjLwJLSZLsDlO7TsQp6lS8YuJSZDEMFfH1UNVi/qpZKlCebv8/6uMfIxvl4S/1/FYq08R1XxOQl+yeL815THKkSVXulbpNk9xu8E6XMTsyprUnn5PCqku95kp+V3ZAuT59b+PGjercubPuuOMOubu7a+vWrYqKipJhGAoPD9fJkydv5rROQSkFAACAm5Juk75/TNqzQHbDqkGpz+gnR2OF+nvq+VYV1bVuKXl7/D0l4vDZJH30+wF9/8dxWUy73vf+Qh3N5ZIM6b4PpXqPuuxLAfKk84cyRkzFHZWCSmesURMcmb3XJp3L+GX51A7JK0h69AepZP3cTAvkP/t+kWY/KtlTpYptM6a2umdzBtw/14ArXkd69EfJJ/iqh+Z6KVW/fn29+uqr6tLl74XiFi1apCeffFK9e/fWuHHjbua0TkEpBQAAgJtmT5fmPSPtmC3TsOhtj4GaHHe7JMnP0011SwcpwNtdh2KTMm+h7a50zQmbptrxv0uGVer6qVSzmyu/CiDvunhM+vI+6fxByb9Ext28Qitl/ZqEUxnrUsXukXxCMl5TrIZT4gL5zoFl0jc9pfRLUrnm0oNfSx4+Wb/myFppVo/Mu2Wq53eSV+A1D89u73LT95rds2eP6tSpc9m2e+65Rx9//LHWrl17s6cFAAAA8jarm9T5E6lebxmmQy+lfqCva+9UqSLeSkxN16r9Z7VwR4x2x8TLYkitKwVqc8UZGYWUxV3qMYNCCshKUITU92cptErGVL5p7aVTO699fNxxado9GYWUf/GM11JIAddWoWVGqeTuKx38Xfqqa8bop2uJ/l2a2TWjkCp7p/TID1kWUjfipkdK3X333WrevLlGjRp12fZDhw6pRo0aSkpKyol8uYKRUgAAALhlpiktflnaMFmS5Gg1Rn+W7aNdJ+OUbLOreKCXGpT0UNhP/TJ+6Hfzkh6YJVVs5eLgQD5x2XS8wIxfhEs1uPyY8welGZ0ypvsFlpZ6z8tYjwrA9R3bKH3VTUrNYjre3sUZ6ynaU6UKraUHZkru17/zbK6PlJo4caLee+899e3bVzt27JDD4VBKSoomTJigkJCQmz1ttk2aNElly5aVl5eXGjVqpI0bN+b6ewIAAACZDENqN166c6gkybJ0hGru/1gP3RahfndE6p5Kfgqb+0hGIeXum/Gv0hRSQPb5Fs1Y7DyiUcYoji87SYdX/70/dm/GCKm4o1JweemxnymkgBsR0VDqs0DyKSrFbJOmd5ASTv+9/8+50uyeGYVUlXulB2dlq5C6ETddStWvX18bNmzQ0aNHVadOHXl7e8vf319ffPGFxo8fn5MZrzB79mwNHjxYI0eO1B9//KHatWurbdu2OnPmTK6+LwAAAHAZw5Bavia1eC3j+Yo3pSWvScnnM36BPrpW8gzIuDtR5F0ujQrkS95BGSOkIu+SbInSV/dL+5dm3AFsWnspIUYKrZoxZe//79QH4AYUry31WZQx9fXMbmlaO+niUWnb19KcvpIjXarZXeo+Q3LzzPG3v+HpeyNGjFCnTp1Uv/7fdzE4cuSItm/fLovFovr166t48eI5HvSfGjVqpNtuu00fffSRJMnhcCgiIkLPPvushg8fft3XM30PAAAAOW79ZGnxv34W9S6SMR2iRF3XZAIKirSUjClE+3+5fPt17gAGIJvOH8q4wcDFo5dvr9dLuvd9yWK96suuJbu9i9uN5jx+/Ljat28vDw8PdezYUZ06dVKLFi1UpkyZGz3VTbHZbNqyZYtefvnlzG0Wi0WtWrXSunXrrvqa1NRUpaamZj6Pj4/P9ZwAAAAoZG7vnzGtYcHzkkzJNyzjDmDh1VydDMj/3L2kB76SfnhC2j03Y1vE7VLPb3NswWWgUAuOlPouzhjle25/xrbbn5HavpExKjiX3HApNXXqVDkcDq1Zs0YLFizQoEGDFBMTo9atW6tTp0669957FRycey312bNnZbfbFR4eftn28PBwRUVFXfU148eP1+jRo3MtEwAAACBJqt9H8gvPWPfm9v5MJwJykpuH1G2qtKlJxlS+25/J8fVtgEItsGTGVNgNn2Tc/bJmt1wtpKRbuPveP+3Zs0cLFizQvHnztGXLFjVs2FD33XefHnroIZUsWTIncmY6efKkSpYsqbVr16px48aZ21988UWtWLFCGzZsuOI1VxspFRERwfQ9AAAAAACAHJZr0/eupmrVqqpatapefPFFxcbGav78+Zo/f74kaejQoTnxFplCQkJktVp1+vTpy7afPn1axYoVu+prPD095emZ8wtyAQAAAAAA4Obc9N33riU0NFT9+vXTvHnzcryQkiQPDw/Vr19fy5Yty9zmcDi0bNmyy0ZOAQAAAAAAIO+6oZFSCQkJGjVqlBYtWqSzZ88qMDBQlSpVUtOmTXX//ferSpUquZXzMoMHD1bv3r3VoEEDNWzYUO+//76SkpLUt29fp7w/AAAAAAAAbs0NlVK9evXSli1b9MQTTyg8PFyXLl3SSy+9pIMHD2rEiBG699579fHHH+f4OlL/9sADDyg2NlYjRozQqVOnVKdOHS1evPiKxc8BAAAAAACQN93QQue+vr5avXq16tatm7nN399f27dvl9Vq1bhx47Rw4UKtXr1akZGRuRI4J2R3wS0AAAAAAADcmOz2Lje0plR4eLiSk5Ovuq9MmTL69NNP1b9/fw0aNOjG0gIAAAAAAKBQuaFSauDAgXrssce0ffv2ax7zyCOP6LfffrvlYAAAAAAAACi4bmhNqcGDB+vkyZOqV6+eWrdurc6dO8vhcMgwjMxjvvnmG4WEhOR4UAAAAAAAABQcN7Sm1F82btyod999VwsXLtSlS5fk5+enkJAQxcXFKSUlRdOnT1f37t1zI2+OYE0pAAAAAACA3JHd3uWGSqnGjRurbt26qlOnjurUqaMqVapo9+7d2rdvn+Lj4xUSEqIWLVooLCwsR76I3EIpBQAAAAAAkDuy27vc0PS9Dh06aMeOHZowYYKio6NlGIYqVqyYWVIFBwffcnAAAAAAAAAUfDc1fU/KmMLXuXNn3XHHHXJ3d9fWrVsVFRUlwzAUHh6ukydP5nTWHMNIKQAAAAAAgNyRKyOl/ql///6aNGmSunTpkrlt0aJFevLJJ9W7d++bPS0AAAAAAAAKAcvNvnDPnj2qU6fOZdvuueceffzxx1q7du2t5gIAAAAAAEABdtOl1G233aYZM2Zcsb1mzZrauHHjLYUCAAAAAABAwXbT0/cmTpyoFi1a6MiRI3rhhRdUo0YN2Ww2TZgwQSEhITmZEQAAAAAAAAXMTZdS9evX14YNGzRw4EDVqVNH7u7ucjgccnNz0xdffJGTGQEAAAAAAFDA3HQpJUlVqlTR0qVLdfToUW3btk0Wi0X169dX8eLFcyofAAAAAAAACqBbKqX+Urp0aZUuXTonTgUAAAAAAIBC4KYXOgcAAAAAAABuFqUUAAAAAAAAnI5SCgAAAAAAAE5HKQUAAAAAAACno5QCAAAAAACA01FKAQAAAAAAwOkopQAAAAAAAOB0lFIAAAAAAABwOkopAAAAAAAAOF2+K6XGjRunJk2ayMfHR0FBQa6OAwAAAAAAgJuQ70opm82m7t27q3///q6OAgAAAAAAgJvk5uoAN2r06NGSpOnTp7s2CAAAAAAAAG5aviulbkZqaqpSU1Mzn8fHx7swDQAAAAAAAPLd9L2bMX78eAUGBmY+IiIiXB0JAAAAAACgUMsTpdTw4cNlGEaWj6ioqJs+/8svv6y4uLjMx7Fjx3IwPQAAAAAAAG5Unpi+N2TIEPXp0yfLY8qVK3fT5/f09JSnp+dNvx4AAAAAAAA5K0+UUqGhoQoNDXV1DAAAAAAAADhJniilbsTRo0d1/vx5HT16VHa7Xdu2bZMkVahQQX5+fq4NBwAAAAAAgGzJd6XUiBEjNGPGjMzndevWlST9/vvvatasmYtSAQAAAAAA4EYYpmmarg7hbPHx8QoMDFRcXJwCAgJcHQcAAAAAAKDAyG7vkifuvgcAAAAAAIDChVIKAAAAAAAATkcpBQAAAAAAAKejlAIAAAAAAIDTUUoBAAAAAADA6SilAAAAAAAA4HSUUgAAAAAAAHA6SikAAAAAAAA4HaUUAAAAAAAAnI5SCgAAAAAAAE5HKQUAAAAAAACno5QCAAAAAACA01FKAQAAAAAAwOkopQAAAAAAAOB0lFIAAAAAAABwOkopAAAAAAAAOB2lFAAAAAAAAJyOUgoAAAAAAABORykFAAAAAAAAp6OUAgAAAAAAgNNRSgEAAAAAAMDpKKUAAAAAAADgdJRSAAAAAAAAcLp8VUodPnxY/fr1U2RkpLy9vVW+fHmNHDlSNpvN1dEAAAAAAABwA9xcHeBGREVFyeFwaMqUKapQoYJ27dqlJ554QklJSXr33XddHQ8AAAAAAADZZJimabo6xK145513NHnyZB08ePCax6Smpio1NTXzeXx8vCIiIhQXF6eAgABnxAQAAAAAACgU4uPjFRgYeN3eJV9N37uauLg4BQcHZ3nM+PHjFRgYmPmIiIhwUjoAAAAAAABcTb4upQ4cOKAPP/xQTz31VJbHvfzyy4qLi8t8HDt2zEkJAQAAAAAAcDV5opQaPny4DMPI8hEVFXXZa06cOKF27dqpe/fueuKJJ7I8v6enpwICAi57AAAAAAAAwHXyxJpSsbGxOnfuXJbHlCtXTh4eHpKkkydPqlmzZrr99ts1ffp0WSw31q1ld24jAAAAAAAAbkx2e5c8cfe90NBQhYaGZuvYEydOqHnz5qpfv76mTZt2w4UUAAAAAAAAXC9PlFLZdeLECTVr1kxlypTRu+++q9jY2Mx9xYoVc2EyAAAAAAAA3Ih8VUotWbJEBw4c0IEDB1SqVKnL9uWBWYgAAAAAAADIpnw1961Pnz4yTfOqDwAAAAAAAOQf+aqUAgAAAAAAQMFAKQUAAAAAAACno5QCAAAAAACA01FKAQAAAAAAwOkopQAAAAAAAOB0lFIAAAAAAABwOkopAAAAAAAAOB2lFAAAAAAAAJyOUgoAAAAAAABORykFAAAAAAAAp6OUAgAAAAAAgNNRSgEAAAAAAMDpKKUAAAAAAADgdJRSAAAAAAAAcDpKKQAAAAAAADgdpRQAAAAAAACcjlIKAAAAAAAATkcpBQAAAAAAAKejlAIAAAAAAIDTUUoBAAAAAADA6SilAAAAAAAA4HSUUgAAAAAAAHA6SikAAAAAAAA4Xb4rpe677z6VLl1aXl5eKl68uB599FGdPHnS1bEAAAAAAABwA/JdKdW8eXN9++232rt3r77//ntFR0erW7duro4FAAAAAACAG2CYpmm6OsStmD9/vjp37qzU1FS5u7tf9ZjU1FSlpqZmPo+Pj1dERITi4uIUEBDgrKgAAAAAAAAFXnx8vAIDA6/bu+S7kVL/dP78ec2aNUtNmjS5ZiElSePHj1dgYGDmIyIiwokpAQAAAAAA8G/5spR66aWX5Ovrq6JFi+ro0aOaN29else//PLLiouLy3wcO3bMSUkBAAAAAABwNXmilBo+fLgMw8jyERUVlXn8sGHDtHXrVv3666+yWq3q1auXspqF6OnpqYCAgMseAAAAAAAAcJ08saZUbGyszp07l+Ux5cqVk4eHxxXbjx8/roiICK1du1aNGzfO1vtld24jAAAAAAAAbkx2exc3J2a6ptDQUIWGht7Uax0OhyRdtpA5AAAAAAAA8rY8UUpl14YNG7Rp0ybdcccdKlKkiKKjo/Xaa6+pfPny2R4lBQAAAAAAANfLE2tKZZePj49++OEHtWzZUpUrV1a/fv1Uq1YtrVixQp6enq6OBwAAAAAAgGzKVyOlatasqd9++83VMQAAAAAAAHCL8tVIKQAAAAAAABQMlFIAAAAAAABwOkopAAAAAAAAOB2lFAAAAAAAAJyOUgoAAAAAAABORykFAAAAAAAAp6OUAgAAAAAAgNNRSgEAAAAAAMDpKKUAAAAAAADgdJRSAAAAAAAAcDpKKQAAAAAAADgdpRQAAAAAAACcjlIKAAAAAAAATufm6gCuYJqmJCk+Pt7FSQAAAAAAAAqWv/qWv/qXaymUpVRCQoIkKSIiwsVJAAAAAAAACqaEhAQFBgZec79hXq+2KoAcDodOnjwpf39/GYbh6jhXFR8fr4iICB07dkwBAQGujgNcF9cs8hOuV+Q3XLPIT7hekd9wzSI/yS/Xq2maSkhIUIkSJWSxXHvlqEI5UspisahUqVKujpEtAQEBefpCA/6Naxb5Cdcr8huuWeQnXK/Ib7hmkZ/kh+s1qxFSf2GhcwAAAAAAADgdpRQAAAAAAACcjlIqj/L09NTIkSPl6enp6ihAtnDNIj/hekV+wzWL/ITrFfkN1yzyk4J2vRbKhc4BAAAAAADgWoyUAgAAAAAAgNNRSgEAAAAAAMDpKKUAAAAAAADgdJRSAAAAAAAAcDpKqTxo3LhxatKkiXx8fBQUFHTVYwzDuOLxzTffODco8P+yc80ePXpUHTp0kI+Pj8LCwjRs2DClp6c7NyhwDWXLlr3iM/XNN990dSxAkjRp0iSVLVtWXl5eatSokTZu3OjqSMBVjRo16orP0ipVqrg6FpBp5cqV6tixo0qUKCHDMDR37tzL9pumqREjRqh48eLy9vZWq1attH//fteERaF3veu1T58+V3zmtmvXzjVhbwGlVB5ks9nUvXt39e/fP8vjpk2bppiYmMxH586dnRMQ+JfrXbN2u10dOnSQzWbT2rVrNWPGDE2fPl0jRoxwclLg2saMGXPZZ+qzzz7r6kiAZs+ercGDB2vkyJH6448/VLt2bbVt21ZnzpxxdTTgqqpXr37ZZ+nq1atdHQnIlJSUpNq1a2vSpElX3f/222/rgw8+0CeffKINGzbI19dXbdu2VUpKipOTAte/XiWpXbt2l33m/u9//3Niwpzh5uoAuNLo0aMlSdOnT8/yuKCgIBUrVswJiYCsXe+a/fXXX7V7924tXbpU4eHhqlOnjl5//XW99NJLGjVqlDw8PJyYFrg6f39/PlOR50ycOFFPPPGE+vbtK0n65JNPtHDhQk2dOlXDhw93cTrgSm5ubnyWIs9q37692rdvf9V9pmnq/fff16uvvqpOnTpJkr788kuFh4dr7ty5evDBB50ZFcjyev2Lp6dnvv/MZaRUPjZgwACFhISoYcOGmjp1qkzTdHUk4KrWrVunmjVrKjw8PHNb27ZtFR8frz///NOFyYC/vfnmmypatKjq1q2rd955h+mlcDmbzaYtW7aoVatWmdssFotatWqldevWuTAZcG379+9XiRIlVK5cOfXs2VNHjx51dSQgWw4dOqRTp05d9pkbGBioRo0a8ZmLPGv58uUKCwtT5cqV1b9/f507d87VkW4YI6XyqTFjxqhFixby8fHRr7/+qmeeeUaJiYl67rnnXB0NuMKpU6cuK6QkZT4/deqUKyIBl3nuuedUr149BQcHa+3atXr55ZcVExOjiRMnujoaCrGzZ8/Kbrdf9fMzKirKRamAa2vUqJGmT5+uypUrKyYmRqNHj9add96pXbt2yd/f39XxgCz99TPp1T5z+XkVeVG7du3UtWtXRUZGKjo6Wq+88orat2+vdevWyWq1ujpetlFKOcnw4cP11ltvZXnMnj17sr0Y5GuvvZb557p16yopKUnvvPMOpRRyTE5fs4Cz3cg1PHjw4MxttWrVkoeHh5566imNHz9enp6euR0VAAqEf04zqVWrlho1aqQyZcro22+/Vb9+/VyYDAAKnn9OKa1Zs6Zq1aql8uXLa/ny5WrZsqULk90YSiknGTJkiPr06ZPlMeXKlbvp8zdq1Eivv/66UlNT+QUKOSInr9lixYpdcbeo06dPZ+4DcsOtXMONGjVSenq6Dh8+rMqVK+dCOuD6QkJCZLVaMz8v/3L69Gk+O5EvBAUFqVKlSjpw4ICrowDX9dfn6unTp1W8ePHM7adPn1adOnVclArIvnLlyikkJEQHDhyglMKVQkNDFRoammvn37Ztm4oUKUIhhRyTk9ds48aNNW7cOJ05c0ZhYWGSpCVLliggIEDVqlXLkfcA/u1WruFt27bJYrFkXq+AK3h4eKh+/fpatmxZ5h12HQ6Hli1bpoEDB7o2HJANiYmJio6O1qOPPurqKMB1RUZGqlixYlq2bFlmCRUfH68NGzZc967oQF5w/PhxnTt37rJSNT+glMqDjh49qvPnz+vo0aOy2+3atm2bJKlChQry8/PTggULdPr0ad1+++3y8vLSkiVL9MYbb2jo0KGuDY5C63rXbJs2bVStWjU9+uijevvtt3Xq1Cm9+uqrGjBgAEUqXG7dunXasGGDmjdvLn9/f61bt04vvPCCHnnkERUpUsTV8VDIDR48WL1791aDBg3UsGFDvf/++0pKSsq8Gx+QlwwdOlQdO3ZUmTJldPLkSY0cOVJWq1UPPfSQq6MBkjKK0n+O3Dt06JC2bdum4OBglS5dWs8//7zGjh2rihUrKjIyUq+99ppKlCiR+Q8DgDNldb0GBwdr9OjRuv/++1WsWDFFR0frxRdfVIUKFdS2bVsXpr4JJvKc3r17m5KuePz++++maZrmzz//bNapU8f08/MzfX19zdq1a5uffPKJabfbXRschdb1rlnTNM3Dhw+b7du3N729vc2QkBBzyJAhZlpamutCA/9vy5YtZqNGjczAwEDTy8vLrFq1qvnGG2+YKSkpro4GmKZpmh9++KFZunRp08PDw2zYsKG5fv16V0cCruqBBx4wixcvbnp4eJglS5Y0H3jgAfPAgQOujgVk+v3336/6M2vv3r1N0zRNh8Nhvvbaa2Z4eLjp6elptmzZ0ty7d69rQ6PQyup6TU5ONtu0aWOGhoaa7u7uZpkyZcwnnnjCPHXqlKtj3zDDNE3TuTUYAAAAAAAACjuLqwMAAAAAAACg8KGUAgAAAAAAgNNRSgEAAAAAAMDpKKUAAAAAAADgdJRSAAAAAAAAcDpKKQAAAAAAADgdpRQAAAAAAACcjlIKAAAAAAAATkcpBQAAAAAAAKejlAIAAMjDTNPUxIkTFRkZKR8fH3Xu3FlxcXGujgUAAHDLKKUAAADysGHDhmny5MmaMWOGVq1apS1btmjUqFGujgUAAHDLDNM0TVeHAAAAwJU2bNigxo0ba/PmzapXr54kacyYMZo1a5b27t3r4nQAAAC3hpFSAAAAedS7776rli1bZhZSkhQeHq6zZ8+6MBUAAEDOoJQCAADIg1JTU7Vw4UJ16dLlsu0pKSkKDAx0USoAAICcw/Q9AACAPGjdunVq0qSJvLy8ZLVaM7enpaWpefPmWrx4sQvTAQAA3Do3VwcAAADAlfbt2ydfX19t27btsu0dOnRQ06ZNXRMKAAAgB1FKAQAA5EHx8fEKCQlRhQoVMrcdOXJE+/fv1/333+/CZAAAADmDNaUAAADyoJCQEMXFxemfKy2MGzdO99xzj6pVq+bCZAAAADmDkVIAAAB5UIsWLZSSkqI333xTDz74oGbNmqUFCxZo48aNro4GAACQIxgpBQAAkAeFh4dr+vTpmjx5sqpXr67169dr9erVioiIcHU0AACAHMHd9wAAAAAAAOB0jJQCAAAAAACA01FKAQAAAAAAwOkopQAAAAAAAOB0lFIAAAAAAABwOkopAAAAAAAAOB2lFAAAAAAAAJyOUgoAAAAAAABORykFAAAAAAAAp6OUAgAAAAAAgNNRSgEAAAAAAMDpKKUAAAAAAADgdP8HegXKmuHTED8AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Comparison & Δt choice:**  \n",
        "\n",
        "For IC A $(\\theta_0=π, \\dot\\theta_0=0$), the system begins at an unstable equilibrium, so the solution stays nearly flat as expected.  \n",
        "\n",
        "For IC B $(\\theta_0=0, \\dot\\theta_0=2$), explicit Euler shows drift in amplitude over long periods of time, while symplectic Euler preserves bounded oscillations over long periods of time.  \n",
        "\n",
        "With ($Δ t=0.01$), the difference is clear. With larger steps like ($Δ t=0.05$), explicit Euler becomes visibly unstable while symplectic Euler remains well-behaved.\n",
        "\n",
        "**Conclusion:** Symplectic Euler is the preferred method for long-term rigid pendulum simulations, since it preserves energy structure and stability even for larger Δt.\n",
        "\n"
      ],
      "metadata": {
        "id": "bTVldPna-dE3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Problem 2:**\n",
        "\n",
        "Use `scipy.integrate` and `solve_ivp` to solve the same problem. You'll need to settle on a solver and on tolerances to get physically meaningful results.\n",
        "\n",
        "1. **[Text cell]:** Include a text cell with organized pseudocode.\n",
        "2. **[Code cell(s)]:** For `theta_0 = math.pi`, and `ang_vel_0 = 0`, plot the temporal evolution of $\\theta$.\n",
        "3. **[Code cell(s)]:** For `theta_0 = 0`, and `ang_vel_0 = 2`, plot the temporal evolution of $\\theta$ **_and_** the phase portrait.\n",
        "4. **[Text cell]:** You will need to choose a solver and tolerances to see sensible results. Use `help(solve_ivp)` or `solve_ivp?` to explore these options. Explain your choice.\n",
        "\n"
      ],
      "metadata": {
        "id": "1MxhS_yQ3_Ie"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# problem 2"
      ],
      "metadata": {
        "id": "3lKzIEhP4nk9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Problem 3:**\n",
        "\n",
        "Debug and edit the code cell included below to plot the phase portrait on constant energy curves.\n",
        "\n",
        "1. **[Code cell(s)]:** Debug the code cell below. Incorporate the details from the **_Constant energy curves_** item in the introduction. Add a comment at the end of each line explaining what that line does.\n",
        "2. **[Code cell(s)]:** Combine the energy contours with your `theta_0 = 0`; `ang_vel_0=2` solution.\n",
        "3. **[Text cell]:** Comment on the result.\n"
      ],
      "metadata": {
        "id": "wgJVIxF-4Dvt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.piplot as plt\n",
        "\n",
        "def rigid_pendulum_energy(theta, ang_vel, omega_0=1, moment_of_inertia=1)\n",
        "  energy = 0.5 * moment_of_inertia * ang_vel ** 2 + moment_of_inerti * omega_0 ** 2 * (1-np.cos(theta))\n",
        "return energy\n",
        "\n",
        "theta_list = np.linspace(-5 * np.pi, 5 * np.pi, 300)\n",
        "ang_vel_list = np.linspace(- np.pi,  np.pi, 100)\n",
        "theta_mesh, ang_vel_mesh = np.meshgrid(theta_list, ang_vel_list)\n",
        "energy_mesh = rigid_pendulum_energy(theta_mesh, ang_vel_mesh)\n",
        "low_levels = np.linespace(0, 2, 5, endpoint=False)\n",
        "high_levels = np.linspace(2, energy_mesh.max(), 15)\n",
        "levels = np.concatenate((low_levels, high_levels))\n",
        "\n",
        "x_lim = [-5 * np.pi - 0.5, 5 * np.pi + 0.5]\n",
        "y_lim = [- np.pi - 0.5, np.pi + 0.5]\n",
        "x_ticks = np.pi * [-4, -2, 0, 2, 4]\n",
        "x_tick_labels = ['$-4\\\\pi$', '$-2\\\\pi$', '$0$', '$2\\\\pi$', '$4\\\\pi$']\n",
        "plt.figure(figsize={12, 3})\n",
        "contours = plt.contourf(theta_mesh, ang_vel_mesh, energy_mesh, levels=30, cmap='viridis')\n",
        "plt.contour(theta_mesh, ang_vel_mesh, energy_mesh, levels=levels, colors='white', linewidths=0.5)\n",
        "# plt.plot(theta_plot[0], ang_vel_plot[1], label='rigid pendulum', color='red', linewidth=0.5)\n",
        "plt.colorbar(contours., label='energy')\n",
        "plt.xlabel('$\\\\theta$')\n",
        "plt.ylabel('$d\\\\theta/dt$')\n",
        "plt.xticks(x_ticks, x_tick_labels)\n",
        "plt.yticks(range(-3,4,1))\n",
        "plt.xlim(x_lim)\n",
        "plt.ylim(y_lim)\n",
        "plt.show()"
      ],
      "metadata": {
        "collapsed": true,
        "id": "w3uYtfPA4Fp1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PaGXOB1O8fxb"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}